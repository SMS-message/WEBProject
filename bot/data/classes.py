from telebot.types import *
from telebot import TeleBot
from bot.data.functions import *
import json


class VideoHoster:
    def __init__(self, bot: TeleBot, do_log: bool, hoster: str):
        self.bot = bot
        self.l = do_log
        self.hoster = hoster

    def greet(self, message: Message) -> None:
        try:
            markup = ReplyKeyboardMarkup()
            markup.row(KeyboardButton("üì∫ –°–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ"), KeyboardButton("üìπ –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ"))
            if self.l:
                log_all(message.chat.id)
            self.clear_history(message)
            self.bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç!", reply_markup=markup)
            self.bot.register_next_step_handler(message, self.menu)
        except Exception as err:
            self.bot.send_message(self.hoster, f"–û—à–∏–±–∫–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.chat.id}: {err}")

    def menu(self, message: Message) -> None:
        if self.filter_messages(message):
            return
        markup = ReplyKeyboardMarkup()
        markup.row(KeyboardButton("üì∫ –°–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ"), KeyboardButton("üìπ –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ"))
        try:
            with open(f"logs/dialog_log_{message.chat.id}.json", mode="r", encoding="utf-8") as dialog_log:
                messages = json.load(dialog_log)
        except json.decoder.JSONDecodeError:
            messages = []
        messages.append({"role": "user", "content": message.text})
        bot_text = "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –Ω–∞ –≤–∞—à–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ! üòâ"
        messages.append({"role": "assistant", "content": bot_text})
        log_dialog(messages, message.chat.id)

        self.bot.send_message(message.chat.id, bot_text, reply_markup=markup)
        self.bot.register_next_step_handler(message, self.menu)

    def filter_messages(self, message: Message) -> bool:
        filtered = False
        with open("data/blacklist.txt", mode="r") as file:
            if str(message.chat.id) in file.read():
                self.bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —á—ë—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ –±–æ—Ç–∞")
                return True
        match message.text:
            case "/start":
                self.greet(message)
                filtered = True
            case "üì∫ –°–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ":
                self.bot.send_message(message.chat.id, "–ó–∞–≥—Ä—É–∂–∞—é –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∏–¥–µ–æ! :D",
                                      reply_markup=ReplyKeyboardRemove())
                self.watch(message)
                filtered = True
            case "üìπ –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ":
                self.bot.send_message(message.chat.id, "–ü—Ä–∏—à–ª–∏—Ç–µ —Å–≤–æ—ë –≤–∏–¥–µ–æ! :)", reply_markup=ReplyKeyboardRemove())
                self.send_video(message)
                filtered = True
        return filtered

    def watch(self, message: Message):
        ...

    def send_video(self, message: Message):
        ...

    def clear_history(self, message: Message):
        try:
            with open(f"logs/dialog_log_{message.chat.id}.json", mode="w", encoding="utf-8"):
                pass
        except Exception as err:
            self.bot.send_message(self.hoster, f"–û—à–∏–±–∫–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.chat.id}: {err}")


class Video:
    ...
